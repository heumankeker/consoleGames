//CORRIDA DE GRILOS MULTITHREAD COM CONCORRENCIA DE DADOS & Sincronização - JAVA 
//Desenvolvido por>>>>
//HEUMAN KEKER MAGALHÃES ANTUNES -- MAT 32162138 -- heumanantunes@gmail.com
//SUSAN ARAUJO DE OLIVEIRA -- MAT 20182003829 -- susan.kitsune147@gmail.com
//Matéria - Jogos para Consoles
//Professor José Ricardo Júnior - IFRJ - CEPF
// USE máscara! Se proteja.

import java.util.Random;
import java.util.concurrent.atomic.AtomicIntegerArray;

public class Main extends Thread implements Runnable {

	//Array atômico para concorrencia de dados!
	//Define array do #TOTAL DE PULOS dos grilos, baseado no número máximo de Grilos
	private static AtomicIntegerArray AT = new AtomicIntegerArray(9);
	
	//Array atômico para concorrencia de dados!
	//Define array #TOTAL PERCORRIDO pelo grilos, baseado no número máximo de Grilos
	private static AtomicIntegerArray AP = new AtomicIntegerArray(9);
	private static AtomicIntegerArray AG = new AtomicIntegerArray(3);
	
	//variável para index corrente do array de thread - 
	//A posição é passada como referência para a tread e, indica o local de index do array 
	//onde será salvo o número de pulos realizado pela thread
	//que é idêntica ao nome da thread
	private int nova;
	
	//inicia o construtor da classe Main
	public Main(int nova) {
		this.nova = nova;
	}
	//Implementaçãodo método principal da thread
	public void run()
	{  
		int chegada = 100;   //DISTÂNCIA da linha de chegada
		int pulos = 0;        //soma total de pulos da thread
		int somaPulo = 0;     //soma total da distância percorrida por cada grilo
		
		
		System.out.println("______________________________");
		System.out.println("GRILO Thread " + Thread.currentThread().getName()  + " jogando...\n");
		
		//início do loop de pulos do grilo - sai quando a thread alcançar ou ultrapassar "chegada"
		int i = 0;  
			for(i = 0; somaPulo < chegada; i++)
			{
				//gerando um número aleatório
				Random r = new Random();
				int valor = r.nextInt(10)+1;//Define o Range máximo de cada pulo;
				
				//imcrementa um pulo ao grilo
				pulos++;
				System.out.println("Pulo >>>>> " + pulos + " <<<<<");
				
				//imprime o valor do random gerado
				System.out.println("O grilo "+ Thread.currentThread().getName() + " pulou..." + valor + "cm!");
				
				//atribui o random gerado à distância percorrida pelo grilo
				somaPulo = somaPulo+ valor;
				System.out.println("e percoreu um total de |" + somaPulo + "|cm!\n");
			}
			System.out.println("O grilo " + nova + "# alcançou a linha de chegada!");
			
			// insere o valor da soma dos pulos do grilo na variável atomica tendo como
			// base o valor recebido no index da criação da thread.
			AT.set(nova, pulos);
			AP.set(nova, somaPulo);
	}  
	public static void main(String[] args) throws InterruptedException {
		//MAXIMO de GRILOS/THREADS
		int max = 9;
		int maxTeam =3;
		//int[] teamPulos = new int[3];
		//int[] teamPercurso = new int[9];
		
		//variável auxiliar para enviar o index corrent da thread;
		int nova = 0;
		
		//inicializa os valores do vector atomico AT
        for (int u=0; u<AT.length(); u++)
        {
            AT.set(u, 0);
        }
        
    	//inicializa os valores do vector atomico AP
        for (int i=0; i<AP.length(); i++)
        {
            AT.set(i, 0);
        }
        
      //inicializa os valores do vector atomico AG
        for (int i=0; i<AG.length(); i++)
        {
            AT.set(i, 0);
        }
		//inicializa a variável para uso do sleep()
		long start = System.currentTimeMillis();
		
		//INICIANDO THREADS
		Main test[] = new Main[max];  
		
	    for(int a = 0; a < test.length; a++)
	    {
	      test[a] = new Main(a);
	      test[a].start();
	      test[a].join();
	    }
	    System.out.println("_______________LOADING_______________\n");
	    
		//suspende o start da thread por 3 segundos neste caso do main..
        Thread.sleep(3000);

        //imprime o vector AT
        System.out.println("!!! Fim da corrida !!!");
        System.out.println("RESULTADO");
        System.out.println("---" + AT + "---\n");
        System.out.println("---" + AP + "---\n");
        
      //suspende o start da thread por 3 segundos neste caso do main..
        Thread.sleep(3000);
	    System.out.println("_______________Checando o GRILO Vencedor_______________\n");
	    
	    for (int d=0; d<AT.length(); d++)
        {
            System.out.println("---GRILO " + d + "--- pulou "+ AT.get(d) + " vezes >> percorreu " + AP.get(d) + "cm\n");
        }
	    
	    //fazendo a soma dos pulos Times de 3 grilos
	    
	    int somaTeam = 0;
	   
	    for(int l =0 ; l<maxTeam;l++) 
	    {
	    		int valor = 0;
	    		valor= AT.get(l);
	    		somaTeam = somaTeam + valor;
	    		
	    }
	    System.out.println("Soma "+ somaTeam);
	    AG.set(0, somaTeam);
	    System.out.println("Soma no vetor AG "+ AG.get(0));
	}
}
